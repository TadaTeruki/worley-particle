// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod particlemap {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};
    #[allow(unused_imports, dead_code)]
    pub mod items {

        use core::cmp::Ordering;
        use core::mem;

        extern crate flatbuffers;
        use self::flatbuffers::{EndianScalar, Follow};

        pub enum FbsParticleParametersOffset {}
        #[derive(Copy, Clone, PartialEq)]

        pub struct FbsParticleParameters<'a> {
            pub _tab: flatbuffers::Table<'a>,
        }

        impl<'a> flatbuffers::Follow<'a> for FbsParticleParameters<'a> {
            type Inner = FbsParticleParameters<'a>;
            #[inline]
            unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
                Self {
                    _tab: flatbuffers::Table::new(buf, loc),
                }
            }
        }

        impl<'a> FbsParticleParameters<'a> {
            pub const VT_SEED: flatbuffers::VOffsetT = 4;
            pub const VT_MIN_RANDOMNESS: flatbuffers::VOffsetT = 6;
            pub const VT_MAX_RANDOMNESS: flatbuffers::VOffsetT = 8;
            pub const VT_SCALE: flatbuffers::VOffsetT = 10;

            #[inline]
            pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
                FbsParticleParameters { _tab: table }
            }
            #[allow(unused_mut)]
            pub fn create<
                'bldr: 'args,
                'args: 'mut_bldr,
                'mut_bldr,
                A: flatbuffers::Allocator + 'bldr,
            >(
                _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
                args: &'args FbsParticleParametersArgs,
            ) -> flatbuffers::WIPOffset<FbsParticleParameters<'bldr>> {
                let mut builder = FbsParticleParametersBuilder::new(_fbb);
                builder.add_scale(args.scale);
                builder.add_max_randomness(args.max_randomness);
                builder.add_min_randomness(args.min_randomness);
                builder.add_seed(args.seed);
                builder.finish()
            }

            #[inline]
            pub fn seed(&self) -> u64 {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe {
                    self._tab
                        .get::<u64>(FbsParticleParameters::VT_SEED, Some(0))
                        .unwrap()
                }
            }
            #[inline]
            pub fn min_randomness(&self) -> f64 {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe {
                    self._tab
                        .get::<f64>(FbsParticleParameters::VT_MIN_RANDOMNESS, Some(0.0))
                        .unwrap()
                }
            }
            #[inline]
            pub fn max_randomness(&self) -> f64 {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe {
                    self._tab
                        .get::<f64>(FbsParticleParameters::VT_MAX_RANDOMNESS, Some(0.0))
                        .unwrap()
                }
            }
            #[inline]
            pub fn scale(&self) -> f64 {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe {
                    self._tab
                        .get::<f64>(FbsParticleParameters::VT_SCALE, Some(0.0))
                        .unwrap()
                }
            }
        }

        impl flatbuffers::Verifiable for FbsParticleParameters<'_> {
            #[inline]
            fn run_verifier(
                v: &mut flatbuffers::Verifier,
                pos: usize,
            ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
                use self::flatbuffers::Verifiable;
                v.visit_table(pos)?
                    .visit_field::<u64>("seed", Self::VT_SEED, false)?
                    .visit_field::<f64>("min_randomness", Self::VT_MIN_RANDOMNESS, false)?
                    .visit_field::<f64>("max_randomness", Self::VT_MAX_RANDOMNESS, false)?
                    .visit_field::<f64>("scale", Self::VT_SCALE, false)?
                    .finish();
                Ok(())
            }
        }
        pub struct FbsParticleParametersArgs {
            pub seed: u64,
            pub min_randomness: f64,
            pub max_randomness: f64,
            pub scale: f64,
        }
        impl<'a> Default for FbsParticleParametersArgs {
            #[inline]
            fn default() -> Self {
                FbsParticleParametersArgs {
                    seed: 0,
                    min_randomness: 0.0,
                    max_randomness: 0.0,
                    scale: 0.0,
                }
            }
        }

        pub struct FbsParticleParametersBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
            fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
            start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
        }
        impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FbsParticleParametersBuilder<'a, 'b, A> {
            #[inline]
            pub fn add_seed(&mut self, seed: u64) {
                self.fbb_
                    .push_slot::<u64>(FbsParticleParameters::VT_SEED, seed, 0);
            }
            #[inline]
            pub fn add_min_randomness(&mut self, min_randomness: f64) {
                self.fbb_.push_slot::<f64>(
                    FbsParticleParameters::VT_MIN_RANDOMNESS,
                    min_randomness,
                    0.0,
                );
            }
            #[inline]
            pub fn add_max_randomness(&mut self, max_randomness: f64) {
                self.fbb_.push_slot::<f64>(
                    FbsParticleParameters::VT_MAX_RANDOMNESS,
                    max_randomness,
                    0.0,
                );
            }
            #[inline]
            pub fn add_scale(&mut self, scale: f64) {
                self.fbb_
                    .push_slot::<f64>(FbsParticleParameters::VT_SCALE, scale, 0.0);
            }
            #[inline]
            pub fn new(
                _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
            ) -> FbsParticleParametersBuilder<'a, 'b, A> {
                let start = _fbb.start_table();
                FbsParticleParametersBuilder {
                    fbb_: _fbb,
                    start_: start,
                }
            }
            #[inline]
            pub fn finish(self) -> flatbuffers::WIPOffset<FbsParticleParameters<'a>> {
                let o = self.fbb_.end_table(self.start_);
                flatbuffers::WIPOffset::new(o.value())
            }
        }

        impl core::fmt::Debug for FbsParticleParameters<'_> {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                let mut ds = f.debug_struct("FbsParticleParameters");
                ds.field("seed", &self.seed());
                ds.field("min_randomness", &self.min_randomness());
                ds.field("max_randomness", &self.max_randomness());
                ds.field("scale", &self.scale());
                ds.finish()
            }
        }
        pub enum FbsParticleOffset {}
        #[derive(Copy, Clone, PartialEq)]

        pub struct FbsParticle<'a> {
            pub _tab: flatbuffers::Table<'a>,
        }

        impl<'a> flatbuffers::Follow<'a> for FbsParticle<'a> {
            type Inner = FbsParticle<'a>;
            #[inline]
            unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
                Self {
                    _tab: flatbuffers::Table::new(buf, loc),
                }
            }
        }

        impl<'a> FbsParticle<'a> {
            pub const VT_X: flatbuffers::VOffsetT = 4;
            pub const VT_Y: flatbuffers::VOffsetT = 6;
            pub const VT_VALUE: flatbuffers::VOffsetT = 8;

            #[inline]
            pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
                FbsParticle { _tab: table }
            }
            #[allow(unused_mut)]
            pub fn create<
                'bldr: 'args,
                'args: 'mut_bldr,
                'mut_bldr,
                A: flatbuffers::Allocator + 'bldr,
            >(
                _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
                args: &'args FbsParticleArgs<'args>,
            ) -> flatbuffers::WIPOffset<FbsParticle<'bldr>> {
                let mut builder = FbsParticleBuilder::new(_fbb);
                builder.add_y(args.y);
                builder.add_x(args.x);
                if let Some(x) = args.value {
                    builder.add_value(x);
                }
                builder.finish()
            }

            #[inline]
            pub fn x(&self) -> i64 {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe { self._tab.get::<i64>(FbsParticle::VT_X, Some(0)).unwrap() }
            }
            #[inline]
            pub fn y(&self) -> i64 {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe { self._tab.get::<i64>(FbsParticle::VT_Y, Some(0)).unwrap() }
            }
            #[inline]
            pub fn value(&self) -> Option<&'a str> {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe {
                    self._tab
                        .get::<flatbuffers::ForwardsUOffset<&str>>(FbsParticle::VT_VALUE, None)
                }
            }
        }

        impl flatbuffers::Verifiable for FbsParticle<'_> {
            #[inline]
            fn run_verifier(
                v: &mut flatbuffers::Verifier,
                pos: usize,
            ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
                use self::flatbuffers::Verifiable;
                v.visit_table(pos)?
                    .visit_field::<i64>("x", Self::VT_X, false)?
                    .visit_field::<i64>("y", Self::VT_Y, false)?
                    .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                        "value",
                        Self::VT_VALUE,
                        false,
                    )?
                    .finish();
                Ok(())
            }
        }
        pub struct FbsParticleArgs<'a> {
            pub x: i64,
            pub y: i64,
            pub value: Option<flatbuffers::WIPOffset<&'a str>>,
        }
        impl<'a> Default for FbsParticleArgs<'a> {
            #[inline]
            fn default() -> Self {
                FbsParticleArgs {
                    x: 0,
                    y: 0,
                    value: None,
                }
            }
        }

        pub struct FbsParticleBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
            fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
            start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
        }
        impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FbsParticleBuilder<'a, 'b, A> {
            #[inline]
            pub fn add_x(&mut self, x: i64) {
                self.fbb_.push_slot::<i64>(FbsParticle::VT_X, x, 0);
            }
            #[inline]
            pub fn add_y(&mut self, y: i64) {
                self.fbb_.push_slot::<i64>(FbsParticle::VT_Y, y, 0);
            }
            #[inline]
            pub fn add_value(&mut self, value: flatbuffers::WIPOffset<&'b str>) {
                self.fbb_
                    .push_slot_always::<flatbuffers::WIPOffset<_>>(FbsParticle::VT_VALUE, value);
            }
            #[inline]
            pub fn new(
                _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
            ) -> FbsParticleBuilder<'a, 'b, A> {
                let start = _fbb.start_table();
                FbsParticleBuilder {
                    fbb_: _fbb,
                    start_: start,
                }
            }
            #[inline]
            pub fn finish(self) -> flatbuffers::WIPOffset<FbsParticle<'a>> {
                let o = self.fbb_.end_table(self.start_);
                flatbuffers::WIPOffset::new(o.value())
            }
        }

        impl core::fmt::Debug for FbsParticle<'_> {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                let mut ds = f.debug_struct("FbsParticle");
                ds.field("x", &self.x());
                ds.field("y", &self.y());
                ds.field("value", &self.value());
                ds.finish()
            }
        }
        pub enum FbsParticleMapOffset {}
        #[derive(Copy, Clone, PartialEq)]

        pub struct FbsParticleMap<'a> {
            pub _tab: flatbuffers::Table<'a>,
        }

        impl<'a> flatbuffers::Follow<'a> for FbsParticleMap<'a> {
            type Inner = FbsParticleMap<'a>;
            #[inline]
            unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
                Self {
                    _tab: flatbuffers::Table::new(buf, loc),
                }
            }
        }

        impl<'a> FbsParticleMap<'a> {
            pub const VT_PARAMS: flatbuffers::VOffsetT = 4;
            pub const VT_PARTICLES: flatbuffers::VOffsetT = 6;

            #[inline]
            pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
                FbsParticleMap { _tab: table }
            }
            #[allow(unused_mut)]
            pub fn create<
                'bldr: 'args,
                'args: 'mut_bldr,
                'mut_bldr,
                A: flatbuffers::Allocator + 'bldr,
            >(
                _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
                args: &'args FbsParticleMapArgs<'args>,
            ) -> flatbuffers::WIPOffset<FbsParticleMap<'bldr>> {
                let mut builder = FbsParticleMapBuilder::new(_fbb);
                if let Some(x) = args.particles {
                    builder.add_particles(x);
                }
                if let Some(x) = args.params {
                    builder.add_params(x);
                }
                builder.finish()
            }

            #[inline]
            pub fn params(&self) -> Option<FbsParticleParameters<'a>> {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe {
                    self._tab
                        .get::<flatbuffers::ForwardsUOffset<FbsParticleParameters>>(
                            FbsParticleMap::VT_PARAMS,
                            None,
                        )
                }
            }
            #[inline]
            pub fn particles(
                &self,
            ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FbsParticle<'a>>>>
            {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe {
                    self._tab.get::<flatbuffers::ForwardsUOffset<
                        flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FbsParticle>>,
                    >>(FbsParticleMap::VT_PARTICLES, None)
                }
            }
        }

        impl flatbuffers::Verifiable for FbsParticleMap<'_> {
            #[inline]
            fn run_verifier(
                v: &mut flatbuffers::Verifier,
                pos: usize,
            ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
                use self::flatbuffers::Verifiable;
                v.visit_table(pos)?
                    .visit_field::<flatbuffers::ForwardsUOffset<FbsParticleParameters>>(
                        "params",
                        Self::VT_PARAMS,
                        false,
                    )?
                    .visit_field::<flatbuffers::ForwardsUOffset<
                        flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<FbsParticle>>,
                    >>("particles", Self::VT_PARTICLES, false)?
                    .finish();
                Ok(())
            }
        }
        pub struct FbsParticleMapArgs<'a> {
            pub params: Option<flatbuffers::WIPOffset<FbsParticleParameters<'a>>>,
            pub particles: Option<
                flatbuffers::WIPOffset<
                    flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FbsParticle<'a>>>,
                >,
            >,
        }
        impl<'a> Default for FbsParticleMapArgs<'a> {
            #[inline]
            fn default() -> Self {
                FbsParticleMapArgs {
                    params: None,
                    particles: None,
                }
            }
        }

        pub struct FbsParticleMapBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
            fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
            start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
        }
        impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FbsParticleMapBuilder<'a, 'b, A> {
            #[inline]
            pub fn add_params(
                &mut self,
                params: flatbuffers::WIPOffset<FbsParticleParameters<'b>>,
            ) {
                self.fbb_
                    .push_slot_always::<flatbuffers::WIPOffset<FbsParticleParameters>>(
                        FbsParticleMap::VT_PARAMS,
                        params,
                    );
            }
            #[inline]
            pub fn add_particles(
                &mut self,
                particles: flatbuffers::WIPOffset<
                    flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<FbsParticle<'b>>>,
                >,
            ) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                    FbsParticleMap::VT_PARTICLES,
                    particles,
                );
            }
            #[inline]
            pub fn new(
                _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
            ) -> FbsParticleMapBuilder<'a, 'b, A> {
                let start = _fbb.start_table();
                FbsParticleMapBuilder {
                    fbb_: _fbb,
                    start_: start,
                }
            }
            #[inline]
            pub fn finish(self) -> flatbuffers::WIPOffset<FbsParticleMap<'a>> {
                let o = self.fbb_.end_table(self.start_);
                flatbuffers::WIPOffset::new(o.value())
            }
        }

        impl core::fmt::Debug for FbsParticleMap<'_> {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                let mut ds = f.debug_struct("FbsParticleMap");
                ds.field("params", &self.params());
                ds.field("particles", &self.particles());
                ds.finish()
            }
        }
        #[inline]
        /// Verifies that a buffer of bytes contains a `FbsParticleMap`
        /// and returns it.
        /// Note that verification is still experimental and may not
        /// catch every error, or be maximally performant. For the
        /// previous, unchecked, behavior use
        /// `root_as_fbs_particle_map_unchecked`.
        pub fn root_as_fbs_particle_map(
            buf: &[u8],
        ) -> Result<FbsParticleMap, flatbuffers::InvalidFlatbuffer> {
            flatbuffers::root::<FbsParticleMap>(buf)
        }
        #[inline]
        /// Verifies that a buffer of bytes contains a size prefixed
        /// `FbsParticleMap` and returns it.
        /// Note that verification is still experimental and may not
        /// catch every error, or be maximally performant. For the
        /// previous, unchecked, behavior use
        /// `size_prefixed_root_as_fbs_particle_map_unchecked`.
        pub fn size_prefixed_root_as_fbs_particle_map(
            buf: &[u8],
        ) -> Result<FbsParticleMap, flatbuffers::InvalidFlatbuffer> {
            flatbuffers::size_prefixed_root::<FbsParticleMap>(buf)
        }
        #[inline]
        /// Verifies, with the given options, that a buffer of bytes
        /// contains a `FbsParticleMap` and returns it.
        /// Note that verification is still experimental and may not
        /// catch every error, or be maximally performant. For the
        /// previous, unchecked, behavior use
        /// `root_as_fbs_particle_map_unchecked`.
        pub fn root_as_fbs_particle_map_with_opts<'b, 'o>(
            opts: &'o flatbuffers::VerifierOptions,
            buf: &'b [u8],
        ) -> Result<FbsParticleMap<'b>, flatbuffers::InvalidFlatbuffer> {
            flatbuffers::root_with_opts::<FbsParticleMap<'b>>(opts, buf)
        }
        #[inline]
        /// Verifies, with the given verifier options, that a buffer of
        /// bytes contains a size prefixed `FbsParticleMap` and returns
        /// it. Note that verification is still experimental and may not
        /// catch every error, or be maximally performant. For the
        /// previous, unchecked, behavior use
        /// `root_as_fbs_particle_map_unchecked`.
        pub fn size_prefixed_root_as_fbs_particle_map_with_opts<'b, 'o>(
            opts: &'o flatbuffers::VerifierOptions,
            buf: &'b [u8],
        ) -> Result<FbsParticleMap<'b>, flatbuffers::InvalidFlatbuffer> {
            flatbuffers::size_prefixed_root_with_opts::<FbsParticleMap<'b>>(opts, buf)
        }
        #[inline]
        /// Assumes, without verification, that a buffer of bytes contains a FbsParticleMap and returns it.
        /// # Safety
        /// Callers must trust the given bytes do indeed contain a valid `FbsParticleMap`.
        pub unsafe fn root_as_fbs_particle_map_unchecked(buf: &[u8]) -> FbsParticleMap {
            flatbuffers::root_unchecked::<FbsParticleMap>(buf)
        }
        #[inline]
        /// Assumes, without verification, that a buffer of bytes contains a size prefixed FbsParticleMap and returns it.
        /// # Safety
        /// Callers must trust the given bytes do indeed contain a valid size prefixed `FbsParticleMap`.
        pub unsafe fn size_prefixed_root_as_fbs_particle_map_unchecked(
            buf: &[u8],
        ) -> FbsParticleMap {
            flatbuffers::size_prefixed_root_unchecked::<FbsParticleMap>(buf)
        }
        #[inline]
        pub fn finish_fbs_particle_map_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
            fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
            root: flatbuffers::WIPOffset<FbsParticleMap<'a>>,
        ) {
            fbb.finish(root, None);
        }

        #[inline]
        pub fn finish_size_prefixed_fbs_particle_map_buffer<
            'a,
            'b,
            A: flatbuffers::Allocator + 'a,
        >(
            fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
            root: flatbuffers::WIPOffset<FbsParticleMap<'a>>,
        ) {
            fbb.finish_size_prefixed(root, None);
        }
    } // pub mod items
} // pub mod particlemap
